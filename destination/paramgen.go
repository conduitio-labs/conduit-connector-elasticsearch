// Code generated by paramgen. DO NOT EDIT.
// Source: github.com/ConduitIO/conduit-commons/tree/main/paramgen

package destination

import (
	"github.com/conduitio/conduit-commons/config"
)

const (
	ConfigAPIKey                 = "APIKey"
	ConfigBulkSize               = "bulkSize"
	ConfigCertificateFingerprint = "certificateFingerprint"
	ConfigCloudID                = "cloudID"
	ConfigHost                   = "host"
	ConfigIndex                  = "index"
	ConfigPassword               = "password"
	ConfigRetries                = "retries"
	ConfigServiceToken           = "serviceToken"
	ConfigType                   = "type"
	ConfigUsername               = "username"
	ConfigVersion                = "version"
)

func (Config) Parameters() map[string]config.Parameter {
	return map[string]config.Parameter{
		ConfigAPIKey: {
			Default:     "",
			Description: "Base64-encoded token for authorization; if set, overrides username/password and service token.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigBulkSize: {
			Default:     "1000",
			Description: "The number of items stored in bulk in the index. The minimum value is `1`, maximum value is `10 000`.",
			Type:        config.ParameterTypeInt,
			Validations: []config.Validation{},
		},
		ConfigCertificateFingerprint: {
			Default:     "",
			Description: "SHA256 hex fingerprint given by Elasticsearch on first launch.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigCloudID: {
			Default:     "",
			Description: "Endpoint for the Elastic Service (https://elastic.co/cloud).",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigHost: {
			Default:     "",
			Description: "The Elasticsearch host and port (e.g.: http://127.0.0.1:9200).",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
		ConfigIndex: {
			Default:     "{{ index .Metadata \"opencdc.collection\" }}",
			Description: "The name of the index to write the data to.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigPassword: {
			Default:     "",
			Description: "The password for HTTP Basic Authentication.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigRetries: {
			Default:     "0",
			Description: "The maximum number of retries of failed operations. The minimum value is `0` which disabled retry logic. The maximum value is `255.",
			Type:        config.ParameterTypeInt,
			Validations: []config.Validation{},
		},
		ConfigServiceToken: {
			Default:     "",
			Description: "Service token for authorization; if set, overrides username/password.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigType: {
			Default:     "",
			Description: "The name of the index's type to write the data to.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigUsername: {
			Default:     "",
			Description: "The username for HTTP Basic Authentication.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{},
		},
		ConfigVersion: {
			Default:     "",
			Description: "The version of the Elasticsearch service. One of: 5, 6, 7, 8.",
			Type:        config.ParameterTypeString,
			Validations: []config.Validation{
				config.ValidationRequired{},
			},
		},
	}
}
