// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package destination

import (
	"context"
	"github.com/conduitio-labs/conduit-connector-elasticsearch/internal/elasticsearch/api"
	"github.com/conduitio/conduit-commons/opencdc"
	"io"
	"sync"
)

// Ensure, that clientMock does implement client.
// If this is not the case, regenerate this file with moq.
var _ client = &clientMock{}

// clientMock is a mock implementation of client.
//
//	func TestSomethingThatUsesclient(t *testing.T) {
//
//		// make and configure a mocked client
//		mockedclient := &clientMock{
//			BulkFunc: func(ctx context.Context, reader io.Reader) (io.ReadCloser, error) {
//				panic("mock out the Bulk method")
//			},
//			PingFunc: func(ctx context.Context) error {
//				panic("mock out the Ping method")
//			},
//			PrepareCreateOperationFunc: func(item opencdc.Record, index string) (interface{}, interface{}, error) {
//				panic("mock out the PrepareCreateOperation method")
//			},
//			PrepareDeleteOperationFunc: func(key string, index string) (interface{}, error) {
//				panic("mock out the PrepareDeleteOperation method")
//			},
//			PrepareUpsertOperationFunc: func(key string, item opencdc.Record, index string) (interface{}, interface{}, error) {
//				panic("mock out the PrepareUpsertOperation method")
//			},
//			SearchFunc: func(ctx context.Context, request *api.SearchRequest) (*api.SearchResponse, error) {
//				panic("mock out the Search method")
//			},
//		}
//
//		// use mockedclient in code that requires client
//		// and then make assertions.
//
//	}
type clientMock struct {
	// BulkFunc mocks the Bulk method.
	BulkFunc func(ctx context.Context, reader io.Reader) (io.ReadCloser, error)

	// PingFunc mocks the Ping method.
	PingFunc func(ctx context.Context) error

	// PrepareCreateOperationFunc mocks the PrepareCreateOperation method.
	PrepareCreateOperationFunc func(item opencdc.Record, index string) (interface{}, interface{}, error)

	// PrepareDeleteOperationFunc mocks the PrepareDeleteOperation method.
	PrepareDeleteOperationFunc func(key string, index string) (interface{}, error)

	// PrepareUpsertOperationFunc mocks the PrepareUpsertOperation method.
	PrepareUpsertOperationFunc func(key string, item opencdc.Record, index string) (interface{}, interface{}, error)

	// SearchFunc mocks the Search method.
	SearchFunc func(ctx context.Context, request *api.SearchRequest) (*api.SearchResponse, error)

	// calls tracks calls to the methods.
	calls struct {
		// Bulk holds details about calls to the Bulk method.
		Bulk []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Reader is the reader argument value.
			Reader io.Reader
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// PrepareCreateOperation holds details about calls to the PrepareCreateOperation method.
		PrepareCreateOperation []struct {
			// Item is the item argument value.
			Item opencdc.Record
			// Index is the index argument value.
			Index string
		}
		// PrepareDeleteOperation holds details about calls to the PrepareDeleteOperation method.
		PrepareDeleteOperation []struct {
			// Key is the key argument value.
			Key string
			// Index is the index argument value.
			Index string
		}
		// PrepareUpsertOperation holds details about calls to the PrepareUpsertOperation method.
		PrepareUpsertOperation []struct {
			// Key is the key argument value.
			Key string
			// Item is the item argument value.
			Item opencdc.Record
			// Index is the index argument value.
			Index string
		}
		// Search holds details about calls to the Search method.
		Search []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Request is the request argument value.
			Request *api.SearchRequest
		}
	}
	lockBulk                   sync.RWMutex
	lockPing                   sync.RWMutex
	lockPrepareCreateOperation sync.RWMutex
	lockPrepareDeleteOperation sync.RWMutex
	lockPrepareUpsertOperation sync.RWMutex
	lockSearch                 sync.RWMutex
}

// Bulk calls BulkFunc.
func (mock *clientMock) Bulk(ctx context.Context, reader io.Reader) (io.ReadCloser, error) {
	if mock.BulkFunc == nil {
		panic("clientMock.BulkFunc: method is nil but client.Bulk was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Reader io.Reader
	}{
		Ctx:    ctx,
		Reader: reader,
	}
	mock.lockBulk.Lock()
	mock.calls.Bulk = append(mock.calls.Bulk, callInfo)
	mock.lockBulk.Unlock()
	return mock.BulkFunc(ctx, reader)
}

// BulkCalls gets all the calls that were made to Bulk.
// Check the length with:
//
//	len(mockedclient.BulkCalls())
func (mock *clientMock) BulkCalls() []struct {
	Ctx    context.Context
	Reader io.Reader
} {
	var calls []struct {
		Ctx    context.Context
		Reader io.Reader
	}
	mock.lockBulk.RLock()
	calls = mock.calls.Bulk
	mock.lockBulk.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *clientMock) Ping(ctx context.Context) error {
	if mock.PingFunc == nil {
		panic("clientMock.PingFunc: method is nil but client.Ping was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	mock.lockPing.Unlock()
	return mock.PingFunc(ctx)
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//
//	len(mockedclient.PingCalls())
func (mock *clientMock) PingCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockPing.RLock()
	calls = mock.calls.Ping
	mock.lockPing.RUnlock()
	return calls
}

// PrepareCreateOperation calls PrepareCreateOperationFunc.
func (mock *clientMock) PrepareCreateOperation(item opencdc.Record, index string) (interface{}, interface{}, error) {
	if mock.PrepareCreateOperationFunc == nil {
		panic("clientMock.PrepareCreateOperationFunc: method is nil but client.PrepareCreateOperation was just called")
	}
	callInfo := struct {
		Item  opencdc.Record
		Index string
	}{
		Item:  item,
		Index: index,
	}
	mock.lockPrepareCreateOperation.Lock()
	mock.calls.PrepareCreateOperation = append(mock.calls.PrepareCreateOperation, callInfo)
	mock.lockPrepareCreateOperation.Unlock()
	return mock.PrepareCreateOperationFunc(item, index)
}

// PrepareCreateOperationCalls gets all the calls that were made to PrepareCreateOperation.
// Check the length with:
//
//	len(mockedclient.PrepareCreateOperationCalls())
func (mock *clientMock) PrepareCreateOperationCalls() []struct {
	Item  opencdc.Record
	Index string
} {
	var calls []struct {
		Item  opencdc.Record
		Index string
	}
	mock.lockPrepareCreateOperation.RLock()
	calls = mock.calls.PrepareCreateOperation
	mock.lockPrepareCreateOperation.RUnlock()
	return calls
}

// PrepareDeleteOperation calls PrepareDeleteOperationFunc.
func (mock *clientMock) PrepareDeleteOperation(key string, index string) (interface{}, error) {
	if mock.PrepareDeleteOperationFunc == nil {
		panic("clientMock.PrepareDeleteOperationFunc: method is nil but client.PrepareDeleteOperation was just called")
	}
	callInfo := struct {
		Key   string
		Index string
	}{
		Key:   key,
		Index: index,
	}
	mock.lockPrepareDeleteOperation.Lock()
	mock.calls.PrepareDeleteOperation = append(mock.calls.PrepareDeleteOperation, callInfo)
	mock.lockPrepareDeleteOperation.Unlock()
	return mock.PrepareDeleteOperationFunc(key, index)
}

// PrepareDeleteOperationCalls gets all the calls that were made to PrepareDeleteOperation.
// Check the length with:
//
//	len(mockedclient.PrepareDeleteOperationCalls())
func (mock *clientMock) PrepareDeleteOperationCalls() []struct {
	Key   string
	Index string
} {
	var calls []struct {
		Key   string
		Index string
	}
	mock.lockPrepareDeleteOperation.RLock()
	calls = mock.calls.PrepareDeleteOperation
	mock.lockPrepareDeleteOperation.RUnlock()
	return calls
}

// PrepareUpsertOperation calls PrepareUpsertOperationFunc.
func (mock *clientMock) PrepareUpsertOperation(key string, item opencdc.Record, index string) (interface{}, interface{}, error) {
	if mock.PrepareUpsertOperationFunc == nil {
		panic("clientMock.PrepareUpsertOperationFunc: method is nil but client.PrepareUpsertOperation was just called")
	}
	callInfo := struct {
		Key   string
		Item  opencdc.Record
		Index string
	}{
		Key:   key,
		Item:  item,
		Index: index,
	}
	mock.lockPrepareUpsertOperation.Lock()
	mock.calls.PrepareUpsertOperation = append(mock.calls.PrepareUpsertOperation, callInfo)
	mock.lockPrepareUpsertOperation.Unlock()
	return mock.PrepareUpsertOperationFunc(key, item, index)
}

// PrepareUpsertOperationCalls gets all the calls that were made to PrepareUpsertOperation.
// Check the length with:
//
//	len(mockedclient.PrepareUpsertOperationCalls())
func (mock *clientMock) PrepareUpsertOperationCalls() []struct {
	Key   string
	Item  opencdc.Record
	Index string
} {
	var calls []struct {
		Key   string
		Item  opencdc.Record
		Index string
	}
	mock.lockPrepareUpsertOperation.RLock()
	calls = mock.calls.PrepareUpsertOperation
	mock.lockPrepareUpsertOperation.RUnlock()
	return calls
}

// Search calls SearchFunc.
func (mock *clientMock) Search(ctx context.Context, request *api.SearchRequest) (*api.SearchResponse, error) {
	if mock.SearchFunc == nil {
		panic("clientMock.SearchFunc: method is nil but client.Search was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Request *api.SearchRequest
	}{
		Ctx:     ctx,
		Request: request,
	}
	mock.lockSearch.Lock()
	mock.calls.Search = append(mock.calls.Search, callInfo)
	mock.lockSearch.Unlock()
	return mock.SearchFunc(ctx, request)
}

// SearchCalls gets all the calls that were made to Search.
// Check the length with:
//
//	len(mockedclient.SearchCalls())
func (mock *clientMock) SearchCalls() []struct {
	Ctx     context.Context
	Request *api.SearchRequest
} {
	var calls []struct {
		Ctx     context.Context
		Request *api.SearchRequest
	}
	mock.lockSearch.RLock()
	calls = mock.calls.Search
	mock.lockSearch.RUnlock()
	return calls
}
