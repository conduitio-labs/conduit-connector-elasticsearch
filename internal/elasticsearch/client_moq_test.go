// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package elasticsearch

import (
	"context"
	sdk "github.com/conduitio/conduit-connector-sdk"
	"io"
	"sync"
)

// Ensure, that ClientMock does implement Client.
// If this is not the case, regenerate this file with moq.
var _ Client = &ClientMock{}

// ClientMock is a mock implementation of Client.
//
// 	func TestSomethingThatUsesClient(t *testing.T) {
//
// 		// make and configure a mocked Client
// 		mockedClient := &ClientMock{
// 			BulkFunc: func(ctx context.Context, reader io.Reader) (io.ReadCloser, error) {
// 				panic("mock out the Bulk method")
// 			},
// 			PingFunc: func(ctx context.Context) error {
// 				panic("mock out the Ping method")
// 			},
// 			PrepareCreateOperationFunc: func(item sdk.Record) (interface{}, interface{}, error) {
// 				panic("mock out the PrepareCreateOperation method")
// 			},
// 			PrepareDeleteOperationFunc: func(key string) (interface{}, error) {
// 				panic("mock out the PrepareDeleteOperation method")
// 			},
// 			PrepareUpsertOperationFunc: func(key string, item sdk.Record) (interface{}, interface{}, error) {
// 				panic("mock out the PrepareUpsertOperation method")
// 			},
// 		}
//
// 		// use mockedClient in code that requires Client
// 		// and then make assertions.
//
// 	}
type ClientMock struct {
	// BulkFunc mocks the Bulk method.
	BulkFunc func(ctx context.Context, reader io.Reader) (io.ReadCloser, error)

	// PingFunc mocks the Ping method.
	PingFunc func(ctx context.Context) error

	// PrepareCreateOperationFunc mocks the PrepareCreateOperation method.
	PrepareCreateOperationFunc func(item sdk.Record) (interface{}, interface{}, error)

	// PrepareDeleteOperationFunc mocks the PrepareDeleteOperation method.
	PrepareDeleteOperationFunc func(key string) (interface{}, error)

	// PrepareUpsertOperationFunc mocks the PrepareUpsertOperation method.
	PrepareUpsertOperationFunc func(key string, item sdk.Record) (interface{}, interface{}, error)

	// calls tracks calls to the methods.
	calls struct {
		// Bulk holds details about calls to the Bulk method.
		Bulk []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Reader is the reader argument value.
			Reader io.Reader
		}
		// Ping holds details about calls to the Ping method.
		Ping []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// PrepareCreateOperation holds details about calls to the PrepareCreateOperation method.
		PrepareCreateOperation []struct {
			// Item is the item argument value.
			Item sdk.Record
		}
		// PrepareDeleteOperation holds details about calls to the PrepareDeleteOperation method.
		PrepareDeleteOperation []struct {
			// Key is the key argument value.
			Key string
		}
		// PrepareUpsertOperation holds details about calls to the PrepareUpsertOperation method.
		PrepareUpsertOperation []struct {
			// Key is the key argument value.
			Key string
			// Item is the item argument value.
			Item sdk.Record
		}
	}
	lockBulk                   sync.RWMutex
	lockPing                   sync.RWMutex
	lockPrepareCreateOperation sync.RWMutex
	lockPrepareDeleteOperation sync.RWMutex
	lockPrepareUpsertOperation sync.RWMutex
}

// Bulk calls BulkFunc.
func (mock *ClientMock) Bulk(ctx context.Context, reader io.Reader) (io.ReadCloser, error) {
	if mock.BulkFunc == nil {
		panic("ClientMock.BulkFunc: method is nil but Client.Bulk was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Reader io.Reader
	}{
		Ctx:    ctx,
		Reader: reader,
	}
	mock.lockBulk.Lock()
	mock.calls.Bulk = append(mock.calls.Bulk, callInfo)
	mock.lockBulk.Unlock()
	return mock.BulkFunc(ctx, reader)
}

// BulkCalls gets all the calls that were made to Bulk.
// Check the length with:
//     len(mockedClient.BulkCalls())
func (mock *ClientMock) BulkCalls() []struct {
	Ctx    context.Context
	Reader io.Reader
} {
	var calls []struct {
		Ctx    context.Context
		Reader io.Reader
	}
	mock.lockBulk.RLock()
	calls = mock.calls.Bulk
	mock.lockBulk.RUnlock()
	return calls
}

// Ping calls PingFunc.
func (mock *ClientMock) Ping(ctx context.Context) error {
	if mock.PingFunc == nil {
		panic("ClientMock.PingFunc: method is nil but Client.Ping was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockPing.Lock()
	mock.calls.Ping = append(mock.calls.Ping, callInfo)
	mock.lockPing.Unlock()
	return mock.PingFunc(ctx)
}

// PingCalls gets all the calls that were made to Ping.
// Check the length with:
//     len(mockedClient.PingCalls())
func (mock *ClientMock) PingCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockPing.RLock()
	calls = mock.calls.Ping
	mock.lockPing.RUnlock()
	return calls
}

// PrepareCreateOperation calls PrepareCreateOperationFunc.
func (mock *ClientMock) PrepareCreateOperation(item sdk.Record) (interface{}, interface{}, error) {
	if mock.PrepareCreateOperationFunc == nil {
		panic("ClientMock.PrepareCreateOperationFunc: method is nil but Client.PrepareCreateOperation was just called")
	}
	callInfo := struct {
		Item sdk.Record
	}{
		Item: item,
	}
	mock.lockPrepareCreateOperation.Lock()
	mock.calls.PrepareCreateOperation = append(mock.calls.PrepareCreateOperation, callInfo)
	mock.lockPrepareCreateOperation.Unlock()
	return mock.PrepareCreateOperationFunc(item)
}

// PrepareCreateOperationCalls gets all the calls that were made to PrepareCreateOperation.
// Check the length with:
//     len(mockedClient.PrepareCreateOperationCalls())
func (mock *ClientMock) PrepareCreateOperationCalls() []struct {
	Item sdk.Record
} {
	var calls []struct {
		Item sdk.Record
	}
	mock.lockPrepareCreateOperation.RLock()
	calls = mock.calls.PrepareCreateOperation
	mock.lockPrepareCreateOperation.RUnlock()
	return calls
}

// PrepareDeleteOperation calls PrepareDeleteOperationFunc.
func (mock *ClientMock) PrepareDeleteOperation(key string) (interface{}, error) {
	if mock.PrepareDeleteOperationFunc == nil {
		panic("ClientMock.PrepareDeleteOperationFunc: method is nil but Client.PrepareDeleteOperation was just called")
	}
	callInfo := struct {
		Key string
	}{
		Key: key,
	}
	mock.lockPrepareDeleteOperation.Lock()
	mock.calls.PrepareDeleteOperation = append(mock.calls.PrepareDeleteOperation, callInfo)
	mock.lockPrepareDeleteOperation.Unlock()
	return mock.PrepareDeleteOperationFunc(key)
}

// PrepareDeleteOperationCalls gets all the calls that were made to PrepareDeleteOperation.
// Check the length with:
//     len(mockedClient.PrepareDeleteOperationCalls())
func (mock *ClientMock) PrepareDeleteOperationCalls() []struct {
	Key string
} {
	var calls []struct {
		Key string
	}
	mock.lockPrepareDeleteOperation.RLock()
	calls = mock.calls.PrepareDeleteOperation
	mock.lockPrepareDeleteOperation.RUnlock()
	return calls
}

// PrepareUpsertOperation calls PrepareUpsertOperationFunc.
func (mock *ClientMock) PrepareUpsertOperation(key string, item sdk.Record) (interface{}, interface{}, error) {
	if mock.PrepareUpsertOperationFunc == nil {
		panic("ClientMock.PrepareUpsertOperationFunc: method is nil but Client.PrepareUpsertOperation was just called")
	}
	callInfo := struct {
		Key  string
		Item sdk.Record
	}{
		Key:  key,
		Item: item,
	}
	mock.lockPrepareUpsertOperation.Lock()
	mock.calls.PrepareUpsertOperation = append(mock.calls.PrepareUpsertOperation, callInfo)
	mock.lockPrepareUpsertOperation.Unlock()
	return mock.PrepareUpsertOperationFunc(key, item)
}

// PrepareUpsertOperationCalls gets all the calls that were made to PrepareUpsertOperation.
// Check the length with:
//     len(mockedClient.PrepareUpsertOperationCalls())
func (mock *ClientMock) PrepareUpsertOperationCalls() []struct {
	Key  string
	Item sdk.Record
} {
	var calls []struct {
		Key  string
		Item sdk.Record
	}
	mock.lockPrepareUpsertOperation.RLock()
	calls = mock.calls.PrepareUpsertOperation
	mock.lockPrepareUpsertOperation.RUnlock()
	return calls
}
